---
const originalText = "La Rocío és andalusa, de Granada, i estudia català per comunicar-se amb el gat. Té vint-i-vuit anys i parla anglès i castellà. La professora es diu Clara, és de València i té trenta-nou anys. Ah, i jo em dic Bianca, tinc quaranta-set anys i parlo italià, anglès i una mica de francès, però això ja ho saps! Petonets!";
const changedText = "La Rocío és andalusa, de granada, i estudia catala per comunicarse amb el gat. Te vint i vuit anys i parla anglès i castellà. La professora es diu Clara, és de velencia i té trenta-nou anys. Ah, i jo em dic bianca, tinc quaranta-set anys i parlo italià, anglès i una mica de francès, però això ja ho saps! Petonets!";
---

<div class="container">
  <div class="boxes">
    <div class="compare-box left">
      <h3 class="title">Version (A)</h3>
      <textarea id="original-text">{originalText}</textarea>
    </div>
    <div class="compare-box right">
      <h3 class="title">Version (B)</h3>
      <textarea id="changed-text">{changedText}</textarea>
    </div>
  </div>

  <div class="actions">
    <button class="compare-button" id="compare-button">Compare versions</button>

    <div class="options">
      <label>Word mode <input type="radio" name="mode" value="word" /></label>
      <label>Line mode <input type="radio" name="mode" value="line" /></label>

      <label
        >Char mode <input
          type="radio"
          name="mode"
          value="char"
          checked
        /></label
      >
    </div>
  </div>

  <h3 class="title">Result</h3>
  <div class="options">
    <label>
      Show removals <input type="checkbox" id="show-removed" checked />
    </label>

    <label>
      Show additions <input type="checkbox" id="show-added" checked />
    </label>

    <label>
      Semantic cleanup <input type="checkbox" id="cleanup-semantic" />
    </label>
  </div>
  <pre id="result" class="result text show-added show-removed"></pre>
</div>

<script>
  const $ = (selector: string) => document.querySelector(selector);
  const $$ = (selector: string) => document.querySelectorAll(selector);

  import tokenize from "../tokenize.ts";

  import {
    diff,
    diffLinesToChars,
    diffCharsToLines,
    diffMain,
    diffCleanupSemantic
  } from "diff-match-patch-es";

  const DIFF_DELETE = -1;
  const DIFF_INSERT = 1;
  const DIFF_EQUAL = 0;

  const $showAdded = $("#show-added");
  const $showRemoved = $("#show-removed");
  const $$mode = $$("input[name=mode]") as NodeListOf<HTMLInputElement>;
  const $cleanupSemantic = $("#cleanup-semantic") as HTMLInputElement;
  const $result: any = $("#result");
  const $compareButton = $("#compare-button");
  const originalText = document.getElementById(
    "original-text"
  ) as HTMLInputElement;
  const changedText = document.getElementById(
    "changed-text"
  ) as HTMLInputElement;

  let mode: "line" | "word" | "char" = "char";

  // Handlers
  $compareButton?.addEventListener("click", () => {
    makeResult(mode);
  });

  $showAdded?.addEventListener("change", () => {
    $result.classList.toggle("show-added");
  });

  $showRemoved?.addEventListener("change", () => {
    $result.classList.toggle("show-removed");
  });

  $$mode.forEach((modeInput) => {
    modeInput.addEventListener("change", (e: any) => {
      mode = e.target.value;
      makeResult(mode);
    });
  });

  $cleanupSemantic?.addEventListener("change", (e: any) => {
    makeResult(mode);
  });

  // Methods

  function makeResult(mode: string) {
    $result.innerHTML = "";
    let diffArray = [];

    if (mode === "word") {
      diffArray = diffWordMode(originalText.value, changedText.value, {
        diffTimeout: 100,
      });
    } else if (mode === "line") {
      diffArray = diffLineMode(originalText.value, changedText.value, {
        diffTimeout: 100,
      });
    } else {
      diffArray = diffCharMode(originalText.value, changedText.value, {
        diffTimeout: 100,
      });

      if ($cleanupSemantic.checked) diffCleanupSemantic(diffArray);
    }

    diffArray.forEach((diffResultItem: [number, string]) => {
      const diffResultItemType = diffResultItem[0];
      const diffResultItemText = diffResultItem[1];

      if (diffResultItemType === DIFF_EQUAL) {
        $result.innerHTML += diffResultItemText;
      } else if (diffResultItemType === DIFF_DELETE) {
        $result.innerHTML += `<span class="removed">${diffResultItemText}</span>`;
      } else if (diffResultItemType === DIFF_INSERT) {
        $result.innerHTML += `<span class="added">${diffResultItemText}</span>`;
      }
    });
  }

  function diffCharMode(
    text1: string,
    text2: string,
    options: any,
    opt_checklines: boolean = true,
    opt_deadline: number | undefined = undefined
  ) {
    // Scan the text on a line-by-line basis first.
    const diffs = diff(text1, text2, options, opt_checklines, opt_deadline);

    return diffs;
  }

  function diffLineMode(
    text1: string,
    text2: string,
    options: any,
    opt_checklines: boolean = true,
    opt_deadline: number | undefined = undefined
  ) {
    // Scan the text on a line-by-line basis first.
    const a = diffLinesToChars(text1, text2);
    text1 = a.chars1;
    text2 = a.chars2;
    const linearray = a.lineArray;

    const diffs = diffMain(text1, text2, options, opt_checklines, opt_deadline);

    // Convert the diff back to original text.
    diffCharsToLines(diffs, linearray);
    // Eliminate freak matches (e.g. blank lines)
    diffCleanupSemantic(diffs);

    return diffs;
  }

  function diffWordMode(
    text1: string,
    text2: string,
    options: any,
    opt_checklines: boolean = true,
    opt_deadline: number | undefined = undefined
  ) {
    // Scan the text on a line-by-line basis first.
    const { chars1, chars2, lineArray } = diffWordsToChars(text1, text2);

    const diffs = diffMain(
      chars1,
      chars2,
      options,
      opt_checklines,
      opt_deadline
    );

    // Convert the diff back to original text.
    diffCharsToLines(diffs, lineArray);

    return diffs;
  }

  function diffWordsToChars(text1: string, text2: string) {
    const wordArray: string[] = [];
    const wordHash: { [x: string]: number } = {};

    wordArray[0] = "";

    const diffLinesToWordsMunge = (text: string) => {
      let chars = "";
      let wordArrayLength = wordArray.length;
      tokenize(text, (word:any) => {
        if (
          wordHash.hasOwnProperty
            ? wordHash.hasOwnProperty(word)
            : wordHash[word] !== undefined
        ) {
          chars += String.fromCharCode(wordHash[word]);
        } else {
          chars += String.fromCharCode(wordArrayLength);
          wordHash[word] = wordArrayLength;
          // tslint:disable-next-line:no-increment-decrement
          wordArray[wordArrayLength++] = word;
        }
      });
      return chars;
    };

    const chars1 = diffLinesToWordsMunge(text1);
    const chars2 = diffLinesToWordsMunge(text2);
    return { chars1, chars2, lineArray: wordArray };
  }
</script>

<style>
  .container {
    max-width: 980px;
    margin: 3rem auto;
    padding: 0 16px;
    width: 100%;
  }

  textarea,
  .result {
    width: 100%;
    font-family: monospace;
    padding: 1.5rem;
    min-height: 214px;
    resize: none;
    border-radius: 16px;
    border: 1px solid #a9a9a933;
    font-size: 14px;
    white-space: break-spaces;
    background: #00000014;
    line-height: 1.5;
  }

  .result {
    min-height: 100px;
    margin: 1.5rem 0 0;
  }

  .actions {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 1rem 0 2.5rem;
    flex-direction: column;
    gap: 1.5rem;
    margin-top: 2rem;
  }

  .options {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    flex-wrap: wrap;
  }

  .compare-button {
    padding: 0.75rem 1.5rem;
    border-radius: 50px;
    background-color: #ffffff;
    color: #000000;
    border: none;
    cursor: pointer;
    font-family: monospace;
    font-weight: 800;
    font-size: 15px;
    line-height: 1.4;
  }

  .boxes {
    display: flex;
    gap: 2rem 1rem;
    flex-wrap: wrap;
  }

  .compare-box {
    flex: auto;
    display: flex;
    flex-direction: column;
  }

  .title {
    margin: 0 0 1.5rem;
    text-transform: uppercase;
    text-align: center;
    font-size: 1.25rem;
  }

  label {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 6px 8px 6px 10px;
    background: #ffffff12;
    font-size: 13px;
    border-radius: 6px;
  }
</style>

<style is:global>
  span.added {
    background: #21cf214f;
    color: #69ff69;
    display: none;
  }

  span.removed {
    background: #ff505042;
    color: #ff5757;
    display: none;
  }

  .show-removed .removed,
  .show-added .added {
    display: inline;
  }
</style>
